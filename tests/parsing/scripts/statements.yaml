name: statements
categories:
- statements
tests:

- name: load
  categories:
  - load
  tests:
  - script: 'load a'
    result:
      _class: Load
      to_load:
        _class: SpecialReference
        value: ALL
      load_from:
        _class: Reference
        value: 'a'
      into:
        _class: Reference
        value: 'a'
  - script: 'load b, z'
    result:
    - _class: Load
      to_load:
        _class: SpecialReference
        value: ALL
      load_from:
        _class: Reference
        value: 'b'
      into:
        _class: Reference
        value: 'b'
    - _class: Load
      to_load:
        _class: SpecialReference
        value: ALL
      load_from:
        _class: Reference
        value: 'z'
      into:
        _class: Reference
        value: 'z'
  - script: 'load c into x'
    result:
      _class: Load
      to_load:
        _class: SpecialReference
        value: ALL
      load_from:
        _class: Reference
        value: 'c'
      into:
        _class: Reference
        value: 'x'
  - script: 'load d, z into ~'
    result:
    - _class: Load
      to_load:
        _class: SpecialReference
        value: ALL
      load_from:
        _class: Reference
        value: 'd'
      into:
        _class: SpecialReference
        value: ROOT
    - _class: Load
      to_load:
        _class: SpecialReference
        value: ALL
      load_from:
        _class: Reference
        value: 'z'
      into:
        _class: SpecialReference
        value: ROOT
  - script: 'load * from e'
    result:
      _class: Load
      to_load:
        _class: SpecialReference
        value: ALL
      load_from:
        _class: Reference
        value: 'e'
      into:
        _class: SpecialReference
        value: LOCAL
  - script: 'load f from z'
    result:
    - _class: Load
      to_load:
      - _class: Reference
        value: 'f'
      load_from:
        _class: Reference
        value: 'z'
      into:
        _class: SpecialReference
        value: LOCAL
  - script: 'load g from y into z'
    result:
    - _class: Load
      to_load:
      - _class: Reference
        value: 'g'
      load_from:
        _class: Reference
        value: 'y'
      into:
        _class: Reference
        value: 'z'
  - script: 'load h into z'
    result:
    - _class: Load
      to_load:
        _class: SpecialReference
        value: ALL
      load_from:
        _class: Reference
        value: 'h'
      into:
        _class: Reference
        value: 'z'
  - script: 'load i, m from z'
    result:
    - _class: Load
      to_load:
      - _class: Reference
        value: 'i'
      - _class: Reference
        value: 'm'
      load_from:
        _class: Reference
        value: 'z'
      into:
        _class: SpecialReference
        value: LOCAL
  - script: 'load j from m into z'
    result:
    - _class: Load
      to_load:
      - _class: Reference
        value: 'j'
      load_from:
        _class: Reference
        value: 'm'
      into:
        _class: Reference
        value: 'z'
  - script: 'load k, m from z into ~'
    result:
    - _class: Load
      to_load:
      - _class: Reference
        value: 'k'
      - _class: Reference
        value: 'm'
      load_from:
        _class: Reference
        value: 'z'
      into:
        _class: SpecialReference
        value: ROOT
  - script: 'load l, m from y into z'
    result:
    - _class: Load
      to_load:
      - _class: Reference
        value: 'l'
      - _class: Reference
        value: 'm'
      load_from:
        _class: Reference
        value: 'y'
      into:
        _class: Reference
        value: 'z'

- name: assignment
  categories:
  - assignment
  tests:
  - script: 'name = 1'
    result:
      _class: Assignment
      target:
        _class: Reference
        value: name
      value: 1
  - script: 'name += 1'
    result:
      _class: Assignment
      target:
        _class: Reference
        value: 'name'
      value:
        _class: BinaryOp
        left:
          _class: Reference
          value: 'name'
        op:
          _class: TwoSidedOperator
          value: ADD
        right: 1
  - script: 'name -= 1'
    result:
      _class: Assignment
      target:
        _class: Reference
        value: 'name'
      value:
        _class: BinaryOp
        left:
          _class: Reference
          value: 'name'
        op:
          _class: TwoSidedOperator
          value: SUBTRACT
        right: 1
  - script: 'name /= 1'
    result:
      _class: Assignment
      target:
        _class: Reference
        value: 'name'
      value:
        _class: BinaryOp
        left:
          _class: Reference
          value: 'name'
        op:
          _class: TwoSidedOperator
          value: FLOORDIV
        right: 1
  - script: 'name %/= 1'
    result:
      _class: Assignment
      target:
        _class: Reference
        value: 'name'
      value:
        _class: BinaryOp
        left:
          _class: Reference
          value: 'name'
        op:
          _class: TwoSidedOperator
          value: TRUEDIV
        right: 1
  - script: 'name %= 1'
    result:
      _class: Assignment
      target:
        _class: Reference
        value: 'name'
      value:
        _class: BinaryOp
        left:
          _class: Reference
          value: 'name'
        op:
          _class: TwoSidedOperator
          value: MODULO
        right: 1
  - script: 'name => top'
    result:
      _class: Assignment
      target:
        _class: Reference
        value: 'name'
      value:
        _class: Modify
        subject:
          _class: Reference
          value: 'name'
        modifiers:
        - _class: ModifierCall
          modifier:
            _class: Reference
            value: 'top'
          args: []
  - script: '?.{1} = 3'
    result:
      _class: Assignment
      target:
        _class: Access
        accessing:
          _class: SpecialReference
          value: SUBJECT
        accessors:
        - _class: Reduce
          value: 1
      value: 3
  - script: 'name = 1d6'
    result:
      _class: Assignment
      target:
        _class: Reference
        value: name
      value:
        _class: NewDice
        number_of_dice: 1
        sides: 6
  - script: 'name = {2}'
    result:
      _class: Assignment
      target:
        _class: Reference
        value: name
      value:
        _class: Reduce
        value: 2
  - script: 'name = [:]'
    result:
      _class: Assignment
      target:
        _class: Reference
        value: name
      value:
        _class: NewRoll
        value: []
  - script: 'name = [: 1d6 <-> (3d4 + 5) :]'
    result:
      _class: Assignment
      target:
        _class: Reference
        value: name
      value:
        _class: NewRoll
        value:
        - _class: Fill
          size:
            _class: NewDice
            number_of_dice: 1
            sides: 6
          value:
            _class: BinaryOp
            left:
              _class: NewDice
              number_of_dice: 3
              sides: 4
            op:
              _class: TwoSidedOperator
              value: ADD
            right: 5
  - script: 'name = value'
    result:
      _class: Assignment
      target:
        _class: Reference
        value: name
      value:
        _class: Reference
        value: 'value'
  - script: 'name = {1d6}->top(2)'
    result:
      _class: Assignment
      target:
        _class: Reference
        value: name
      value:
        _class: Modify
        subject:
          _class: Reduce
          value:
            _class: NewDice
            number_of_dice: 1
            sides: 6
        modifiers:
        - _class: ModifierCall
          modifier:
            _class: Reference
            value: 'top'
          args: [2]
  - script: 'name = {{(2d4)d6}->top(3)}'
    result:
      _class: Assignment
      target:
        _class: Reference
        value: name
      value:
        _class: Reduce
        value:
          _class: Modify
          subject:
            _class: Reduce
            value:
              _class: NewDice
              number_of_dice:
                _class: NewDice
                number_of_dice: 2
                sides: 4
              sides: 6
          modifiers:
          - _class: ModifierCall
            modifier:
              _class: Reference
              value: 'top'
            args: [3]

- name: blocks
  categories:
  - blocks
  tests:
  - script: '[]'
    result: []
  - script: '[1 + z]'
    result:
      _class: BinaryOp
      left: 1
      op:
        _class: TwoSidedOperator
        value: ADD
      right:
        _class: Reference
        value: z
  - script: '[1 + z  ]'
    result:
      _class: BinaryOp
      left: 1
      op:
        _class: TwoSidedOperator
        value: ADD
      right:
        _class: Reference
        value: z
  - script: '[ 1 + z|]'
    result:
    - _class: BinaryOp
      left: 1
      op:
        _class: TwoSidedOperator
        value: ADD
      right:
        _class: Reference
        value: z
  - script: '[ a = 1]'
    result:
    - _class: Assignment
      target:
        _class: Reference
        value: 'a'
      value: 1
  - script: '[a = 1 | b = 3]'
    result:
    - _class: Assignment
      target:
        _class: Reference
        value: 'a'
      value: 1
    - _class: Assignment
      target:
        _class: Reference
        value: 'b'
      value: 3
  - script: '[1 + z | b = 3]'
    result:
    - _class: BinaryOp
      left: 1
      op:
        _class: TwoSidedOperator
        value: ADD
      right:
        _class: Reference
        value: z
    - _class: Assignment
      target:
        _class: Reference
        value: 'b'
      value: 3
  - script: '[a = 1 | 3 * y]'
    result:
    - _class: Assignment
      target:
        _class: Reference
        value: 'a'
      value: 1
    - _class: BinaryOp
      left: 3
      op:
        _class: TwoSidedOperator
        value: MULTIPLY
      right:
        _class: Reference
        value: y
  - script: '[1 + z | 3 * y]'
    result:
    - _class: BinaryOp
      left: 1
      op:
        _class: TwoSidedOperator
        value: ADD
      right:
        _class: Reference
        value: z
    - _class: BinaryOp
      left: 3
      op:
        _class: TwoSidedOperator
        value: MULTIPLY
      right:
        _class: Reference
        value: y
  - script: "
    [
      1 + z

      3 * y
    ]"
    result:
    - _class: BinaryOp
      left: 1
      op:
        _class: TwoSidedOperator
        value: ADD
      right:
        _class: Reference
        value: z
    - _class: BinaryOp
      left: 3
      op:
        _class: TwoSidedOperator
        value: MULTIPLY
      right:
        _class: Reference
        value: y

- name: attempt
  categories:
  - attempt
  - error_handling
  tests:
  - script: 'attempt a'
    result:
      _class: Attempt
      attempt:
        _class: Reference
        value: 'a'
      buts: []
      always: null
  - script: 'attempt a1 but always b'
    result:
      _class: Attempt
      attempt:
        _class: Reference
        value: 'a1'
      buts: []
      always:
        _class: Reference
        value: 'b'
  - script: "attempt a2 but if b occurs then c"
    result:
      _class: Attempt
      attempt:
        _class: Reference
        value: 'a2'
      buts:
      - _class: ButIf
        predicate:
          _class: Reference
          value: 'b'
        statement:
          _class: Reference
          value: 'c'
      always: null
  - script: "attempt a3 but always b"
    result:
      _class: Attempt
      attempt:
        _class: Reference
        value: 'a3'
      buts: []
      always:
        _class: Reference
        value: 'b'
  - script: "attempt a4 but if b occurs then c but always d"
    result:
      _class: Attempt
      attempt:
        _class: Reference
        value: 'a4'
      buts:
      - _class: ButIf
        predicate:
          _class: Reference
          value: 'b'
        statement:
          _class: Reference
          value: 'c'
      always:
        _class: Reference
        value: 'd'
  - script: "attempt a5 but if b occurs then c but if * occurs then d but always e"
    result:
      _class: Attempt
      attempt:
        _class: Reference
        value: 'a5'
      buts:
      - _class: ButIf
        predicate:
          _class: Reference
          value: 'b'
        statement:
          _class: Reference
          value: 'c'
      - _class: ButIf
        predicate:
          _class: SpecialReference
          value: ALL
        statement:
          _class: Reference
          value: 'd'
      always:
        _class: Reference
        value: 'e'
