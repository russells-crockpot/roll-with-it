name: statements
categories:
- statements
tests:

- name: load
  categories:
  - load
  - bags
  tests:
  - script: 'load ! into test'
    result:
      _class: CreateBag
      value: 'test'
  - script: 'load ! into test, test2'
    result:
    - _class: CreateBag
      value: 'test'
    - _class: CreateBag
      value: 'test2'
  - script: 'load test'
    result:
      _class: Load
      to_load:
        _class: SpecialReference
        value: ALL
      load_from: 'test'
      into: 'test'
  - script: 'load test, test2'
    result:
    - _class: Load
      to_load:
        _class: SpecialReference
        value: ALL
      load_from: 'test'
      into: 'test'
    - _class: Load
      to_load:
        _class: SpecialReference
        value: ALL
      load_from: 'test2'
      into: 'test2'
  - script: 'load test into alias'
    result:
      _class: Load
      to_load:
        _class: SpecialReference
        value: ALL
      load_from: 'test'
      into: 'alias'
  - script: 'load test, test_two into ~'
    result:
    - _class: Load
      to_load:
        _class: SpecialReference
        value: ALL
      load_from: 'test'
      into:
        _class: SpecialReference
        value: ROOT
    - _class: Load
      to_load:
        _class: SpecialReference
        value: ALL
      load_from: 'test_two'
      into:
        _class: SpecialReference
        value: ROOT
  - script: 'load * from test'
    result:
      _class: Load
      to_load:
        _class: SpecialReference
        value: ALL
      load_from: 'test'
      into:
        _class: SpecialReference
        value: ROOT
  - script: 'load test from bag'
    result:
    - _class: Load
      to_load: 'test'
      load_from: 'bag'
      into:
        _class: SpecialReference
        value: ROOT
  - script: 'load test1 from bag into other_bag'
    result:
    - _class: Load
      to_load: 'test1'
      load_from: 'bag'
      into: 'other_bag'
  - script: 'load bag into other_bag'
    result:
    - _class: Load
      to_load:
        _class: SpecialReference
        value: ALL
      load_from: 'bag'
      into: 'other_bag'
  - script: 'load test, test2 from bag'
    result:
    - _class: Load
      to_load: 'test'
      load_from: 'bag'
      into:
        _class: SpecialReference
        value: ROOT
    - _class: Load
      to_load: 'test2'
      load_from: 'bag'
      into:
        _class: SpecialReference
        value: ROOT
  - script: 'load test from bag into alias'
    result:
      _class: Load
      to_load: 'test'
      load_from: 'bag'
      into: 'alias'
  - script: 'load test2, test3 from bag into ~'
    result:
    - _class: Load
      to_load: 'test2'
      load_from: 'bag'
      into:
        _class: SpecialReference
        value: ROOT
    - _class: Load
      to_load: 'test3'
      load_from: 'bag'
      into:
        _class: SpecialReference
        value: ROOT
  - script: 'load test4, test5 from bag into other_bag'
    result:
    - _class: Load
      to_load: 'test4'
      load_from: 'bag'
      into: 'other_bag'
    - _class: Load
      to_load: 'test5'
      load_from: 'bag'
      into: 'other_bag'

- name: assignment
  categories:
  - assignment
  tests:
  - script: 'name = 1'
    result:
      _class: Assignment
      target: name
      value: 1
  - script: 'name += 1'
    result:
      _class: Assignment
      target: 'name'
      value:
        _class: BinaryOp
        left: 'name'
        op: '+'
        right: 1
  - script: 'name -= 1'
    result:
      _class: Assignment
      target: 'name'
      value:
        _class: BinaryOp
        left: 'name'
        op: '-'
        right: 1
  - script: 'name /= 1'
    result:
      _class: Assignment
      target: 'name'
      value:
        _class: BinaryOp
        left: 'name'
        op: '/'
        right: 1
  - script: 'name %/= 1'
    result:
      _class: Assignment
      target: 'name'
      value:
        _class: BinaryOp
        left: 'name'
        op: '%/'
        right: 1
  - script: 'name %= 1'
    result:
      _class: Assignment
      target: 'name'
      value:
        _class: BinaryOp
        left: 'name'
        op: '%'
        right: 1
  - script: 'name &= 1'
    result:
      _class: Assignment
      target: 'name'
      value:
        _class: BinaryOp
        left: 'name'
        op: '&'
        right: 1
  - script: 'name ^= 1'
    result:
      _class: Assignment
      target: 'name'
      value:
        _class: BinaryOp
        left: name
        op: '^'
        right: 1
  - script: '?{1} = 3'
    result:
      _class: Assignment
      target:
        _class: Access
        accessing:
          _class: SpecialReference
          value: SUBJECT
        accessors:
        - _class: Reduce
          value: 1
      value: 3
  - script: 'name = 1d6'
    result:
      _class: Assignment
      target: name
      value:
        _class: Dice
        number_of_dice: 1
        sides: 6
  - script: 'name = {2}'
    result:
      _class: Assignment
      target: name
      value:
        _class: Reduce
        value: 2
  - script: 'name = {@}'
    result:
      _class: Assignment
      target: name
      value:
        _class: Enlarge
        size: null
        value: null
  - script: 'name = {1d6@(3d4 + 5)}'
    result:
      _class: Assignment
      target: name
      value:
        _class: Enlarge
        size:
          _class: Dice
          number_of_dice: 1
          sides: 6
        value:
          _class: BinaryOp
          left:
            _class: Dice
            number_of_dice: 3
            sides: 4
          op: '+'
          right: 5
  - script: 'name = value'
    result:
      _class: Assignment
      target: name
      value: 'value'
  - script: 'name = {1d6}->top(2)'
    result:
      _class: Assignment
      target: name
      value:
        _class: Modify
        subject:
          _class: Reduce
          value:
            _class: Dice
            number_of_dice: 1
            sides: 6
        modifiers:
        - modifier: 'top'
          args: [2]
          _class: ModifierCall
  - script: 'name = {{(2d4)d6}->top(3)}'
    result:
      _class: Assignment
      target: name
      value:
        _class: Reduce
        value:
          _class: Modify
          subject:
            _class: Reduce
            value:
              _class: Dice
              number_of_dice:
                _class: Dice
                number_of_dice: 2
                sides: 4
              sides: 6
          modifiers:
          - modifier: 'top'
            args: [3]
            _class: ModifierCall

- name: blocks
  categories:
  - blocks
  tests:
  - script: '[]'
    result: []
  - script: '[1 + 2]'
    result:
      _class: BinaryOp
      left: 1
      op: '+'
      right: 2
  - script: '[1 + 2  ]'
    result:
      _class: BinaryOp
      left: 1
      op: '+'
      right: 2
  - script: '[ 1 + 2|]'
    result:
    - _class: BinaryOp
      left: 1
      op: '+'
      right: 2
  - script: '[ a = 1]'
    result:
    - _class: Assignment
      target: 'a'
      value: 1
  - script: '[a = 1 | b = 3]'
    result:
    - _class: Assignment
      target: 'a'
      value: 1
    - _class: Assignment
      target: 'b'
      value: 3
  - script: '[1 + 2 | b = 3]'
    result:
    - _class: BinaryOp
      left: 1
      op: '+'
      right: 2
    - _class: Assignment
      target: 'b'
      value: 3
  - script: '[a = 1 | 3 * 4]'
    result:
    - _class: Assignment
      target: 'a'
      value: 1
    - _class: BinaryOp
      left: 3
      op: '*'
      right: 4
  - script: '[1 + 2 | 3 * 4]'
    result:
    - _class: BinaryOp
      left: 1
      op: '+'
      right: 2
    - _class: BinaryOp
      left: 3
      op: '*'
      right: 4
  - script: "
    [
      1 + 2

      3 * 4
    ]"
    result:
    - _class: BinaryOp
      left: 1
      op: '+'
      right: 2
    - _class: BinaryOp
      left: 3
      op: '*'
      right: 4
