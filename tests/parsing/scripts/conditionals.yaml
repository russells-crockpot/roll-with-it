name: basic_conditionals
categories:
- conditionals
tests:

- name: negation
  categories:
  - negation
  - expressions
  tests:
  - script: 'not test'
    result:
      _class: Negation
      value:
        _class: Reference
        value: 'test'
  - script: 'not 1d6'
    result:
      _class: Negation
      value:
        _class: NewDice
        number_of_dice: 1
        sides: 6

- name: comparison_operators
  categories:
  - comparisons
  - comparison_operators
  - expressions
  tests:
  - script: '1 == a'
    result:
      _class: BinaryOp
      left: 1
      op:
        _class: TwoSidedOperator
        value: EQUALS
      right:
        _class: Reference
        value: a
  - script: '1 >= a'
    result:
      _class: BinaryOp
      left: 1
      op:
        _class: TwoSidedOperator
        value: GREATER_THAN_EQUALS
      right:
        _class: Reference
        value: a
  - script: '1 <= a'
    result:
      _class: BinaryOp
      left: 1
      op:
        _class: TwoSidedOperator
        value: LESS_THAN_EQUALS
      right:
        _class: Reference
        value: a
  - script: '1 != a'
    result:
      _class: BinaryOp
      left: 1
      op:
        _class: TwoSidedOperator
        value: NOT_EQUALS
      right:
        _class: Reference
        value: a
  - script: '1 > a'
    result:
      _class: BinaryOp
      left: 1
      op:
        _class: TwoSidedOperator
        value: GREATER_THAN
      right:
        _class: Reference
        value: a
  - script: '1 < a'
    result:
      _class: BinaryOp
      left: 1
      op:
        _class: TwoSidedOperator
        value: LESS_THAN
      right:
        _class: Reference
        value: a
  - script: '1 has a'
    result:
      _class: BinaryOp
      left: 1
      op:
        _class: OneSidedOperator
        value: HAS
      right:
        _class: Reference
        value: a

- name: comparisons
  categories:
  - comparisons
  - expressions
  tests:
  - script: '1 > a'
    result:
      _class: BinaryOp
      left: 1
      op:
        _class: TwoSidedOperator
        value: GREATER_THAN
      right:
        _class: Reference
        value: a
  - script: '1d6 has 2'
    result:
      _class: BinaryOp
      left:
        _class: NewDice
        number_of_dice: 1
        sides: 6
      op:
        _class: OneSidedOperator
        value: HAS
      right: 2
  - script: '1d6 has 2 - b'
    result:
      _class: BinaryOp
      left:
        _class: NewDice
        number_of_dice: 1
        sides: 6
      op:
        _class: OneSidedOperator
        value: HAS
      right:
        _class: BinaryOp
        left: 2
        op:
          _class: TwoSidedOperator
          value: SUBTRACT
        right:
          _class: Reference
          value: b
  - script: '1d6 < 2 !=  z'
    result:
      _class: BinaryOp
      left:
        _class: NewDice
        number_of_dice: 1
        sides: 6
      op:
        _class: TwoSidedOperator
        value: LESS_THAN
      right:
        _class: BinaryOp
        left: 2
        op:
          _class: TwoSidedOperator
          value: NOT_EQUALS
        right:
          _class: Reference
          value: z
  - script: '(1d6 < 2) !=  3'
    result:
      _class: BinaryOp
      left:
        _class: BinaryOp
        left:
          _class: NewDice
          number_of_dice: 1
          sides: 6
        op:
          _class: TwoSidedOperator
          value: LESS_THAN
        right: 2
      op:
        _class: TwoSidedOperator
        value: NOT_EQUALS
      right: 3

- name: use_if
  categories:
  - expressions
  - use_if
  tests:
  - script: 'use 1 if a otherwise 0'
    result:
      _class: UseIf
      use: 1
      predicate:
        _class: Reference
        value: 'a'
      otherwise: 0
  - script: 'use 1d6 if use_d6 otherwise 2d4'
    result:
      _class: UseIf
      use:
        _class: NewDice
        number_of_dice: 1
        sides: 6
      predicate:
        _class: Reference
        value: 'use_d6'
      otherwise:
        _class: NewDice
        number_of_dice: 2
        sides: 4
  - script: 'use 1d6 if use_d6 otherwise use 2d4 if use_d4 otherwise 3d3'
    result:
      _class: UseIf
      use:
        _class: NewDice
        number_of_dice: 1
        sides: 6
      predicate:
        _class: Reference
        value: 'use_d6'
      otherwise:
        _class: UseIf
        use:
          _class: NewDice
          number_of_dice: 2
          sides: 4
        predicate:
          _class: Reference
          value: 'use_d4'
        otherwise:
          _class: NewDice
          number_of_dice: 3
          sides: 3

- name: if_then
  categories:
  - statements
  - if_then
  tests:
  - script: 'if a then 2'
    result:
      _class: IfThen
      predicate:
        _class: Reference
        value: 'a'
      then:
      - 2
      otherwise: []
  - script: 'if b then 2 otherwise 3'
    result:
      _class: IfThen
      predicate:
        _class: Reference
        value: 'b'
      then:
      - 2
      otherwise:
      - 3
  - script: 'if c then 2 otherwise if b then 4'
    result:
      _class: IfThen
      predicate:
        _class: Reference
        value: 'c'
      then:
      - 2
      otherwise:
      - _class: IfThen
        predicate:
          _class: Reference
          value: 'b'
        then:
        - 4
        otherwise: []
  - script: 'if d then 2 otherwise if b then 4 otherwise 5'
    result:
      _class: IfThen
      predicate:
        _class: Reference
        value: 'd'
      then:
      - 2
      otherwise:
      - _class: IfThen
        predicate:
          _class: Reference
          value: 'b'
        then:
        - 4
        otherwise:
        - 5
  - script: 'if e then 2 unless b then 4'
    result:
      _class: IfThen
      predicate:
        _class: Reference
        value: 'b'
      then:
      - 4
      otherwise:
      - _class: IfThen
        predicate:
          _class: Reference
          value: 'e'
        then:
        - 2
        otherwise: []
  - script: 'if f then 2 unless b then 4 otherwise 3'
    result:
      _class: IfThen
      predicate:
        _class: Reference
        value: 'b'
      then:
      - 4
      otherwise:
      - _class: IfThen
        predicate:
          _class: Reference
          value: 'f'
        then:
        - 2
        otherwise:
        - 3
#  - script: "if ?.<'g'> then 2"
#    result:
#      _class: IfThen
#      predicate:
#        _class: Access
#        accessing:
#          _class: SpecialReference
#          value: SUBJECT
#        accessors:
#        - _class: RawAccessor
#          value: 'g'
#      then:
#      - 2
#      otherwise: []
