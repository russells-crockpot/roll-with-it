@@grammar::RollIt
@@eol_comments:: /\/\/.*?$"/
@@keyword:: use if then for do until and or not clear load as from has
@@keyword:: otherwise skip unless into except when stop fullstop

#start = load $;

start = {statement} $;

statement
    =
    | @:basic_statement
    | /[\n\r]+/
    | '|'
    ;

@name
NAME = /[a-zA-Z_][a-zA-Z_0-9]*/;

@name
KEBAB_NAME = /[a-zA-Z_]([\-a-zA-Z_0-9]*[\-a-zA-Z_0-9])?/ ;

COMP_OP =
    | '=='
    | '>='
    | '<='
    | '!='
    | '<'
    | '>'
    | 'has'
    | 'and'
    | 'or'
    ;

FLOAT = /-?\d*\.\d+/ ;

INT = /-?\d+/ ;

NUMBER = FLOAT | INT;

unless = 'unless' predicate:conditional 'then' then:statement;

if_body::If
    = ~ predicate:conditional 'then' then:statement
    unless:{&'unless' ~ unless} ['otherwise' otherwise:statement];

except_when = 'except when' predicate:conditional 'then' then:statement;

# Loops
do_until_body
    = do:statement 'until' until:conditional
      except_when:{&'except when' ~ except_when}
      ['otherwise' otherwise:statement]
    ;

until_do_body
    = until:conditional 'do' do:statement
      except_when:{&'except when' ~ except_when}
      ['otherwise' otherwise:statement]
    ;

dialect_name = KEBAB_NAME | NAME;

load_body
    = to_load:({dialect_name}+ | '*')
      ['from' ~ from_dialect:(dialect_name)]
      ['into' ~ into:reference]
    ;

modifier_args = '(' @:','.{ expression } [','] ')';

modifier_call = '->' modifier:reference args:[modifier_args] ;

reference = NAME | '?' | '~' | '!';

enlarge = size:[expression] '@' value:[expression];

reduce_enlarge
    =
    | '{' !'}' ~ @:(enlarge | expression | '*'| '!') '}'
    | '{' &'}' ~ @:`''` '}'
    ;

accessor
    =
    | '.' @:NAME
    | reduce_enlarge
    ;

expression
    =
    | '()' ~ !()
    | use_if;

use_if::UseIf
    =
    | 'use' ~ use:expression 'if' predicate:conditional 'otherwise' otherwise:expression
    | conditional
    ;

conditional
    =
    | 'not' ~ conditional
    | comparison
    ;

comparison::Comparison
    =
    | left:comparison op:(>COMP_OP) ~ right:expression
    | math
    ;

math::Math
    =
    | left:math op:('+'|'-') ~ right:math
    | left:access op:('*'|'//'|'/' | '%') ~ right:access
    | roll_math
    ;

# &: combine rolls
# ^: remove x number of values
roll_math::RollMath
    =
    | left:roll_math op:('&' | '^') ~ right: expression
    | length
    ;

length
    =
    | '#' ~ length
    | modify
    ;

modify::Modify
    =
    | modifying:access  &'->' ~ modifiers:{modifier_call}+
    | access
    ;

access::Access
    =
    | accessing:modify accessors:{accessor}+
    | dice
    ;

dice::Dice
    =
    | number_of_dice:[reduce_enlarge_expr] /d|D/ ~ sides:reduce_enlarge_expr
    | reduce_enlarge_expr
    ;

reduce_enlarge_expr
    =
    | &'{' ~ reduce_enlarge
    | factor
    ;

factor
    =
    | '(' !')' ~ @:expression ')'
    | atom
    ;

atom
    =
    | NUMBER
    | reference
    ;

modifier_params = '(' @:','.{ reference } [','] ')';

modifier_def_body =  parameters:[modifier_params] definition:statement ;

ASSIGN_OP
    =
    | '='
    | '+='
    | '-='
    | '/='
    | '//='
    | '*='
    | '%='
    | '^='
    | '&='
    ;

modifier_def = target:access '<-' parameters:[modifier_params] definition:statement;

basic_statement
    =
    | 'if' ~ @:if_body
    | 'load' ~ @:load_body
    | &(access '<-') ~ @:modifier_def
    | 'do' ~ @:do_until_body
    | 'until' ~ @:until_do_body
    | target:access op:(>ASSIGN_OP) !'=' ~ value:expression
    | 'skip'
    | 'stop'
    | 'fullstop' stoppage:[expression]
    | expression
    | '[' ~ @:{statement} ']'
    ;
