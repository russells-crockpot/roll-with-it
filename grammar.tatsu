@@grammar::RollIt
@@eol_comments:: /\/\/.*?$"/
@@keyword:: use if then for do until and or not load as from has leave
@@keyword:: otherwise unless into except when for every that
@@keyword:: at after restart before

#start = load $;

start = {statement} $;

statement_end = '\n' | '\r' | '|';

statement
    =
    | >statement_end
    | @:basic_statement
    ;

@name
basic_name = /[a-zA-Z_][a-zA-Z_0-9]*/;

@name
name =  '?' | '~' | '!' | basic_name;


comp_op =
    | '=='
    | '>='
    | '<='
    | '!='
    | '<'
    | '>'
    | 'has' !'do'
    | 'and'
    | 'or'
    ;

float = /-?\d*\.\d+/ ;

int = /-?\d+/ ;

number = float | int;

unless = 'unless' predicate:conditional 'then' then:statement;

if_body
    = ~ predicate:conditional 'then' then:statement
    unless:{&'unless' ~ unless} ['otherwise' otherwise:statement];

# Loops
until_do_body
    = [('@' name:basic_name)] until:conditional 'do' do:statement
      except_when:{'except' ~ 'when'  conditional 'then' statement}
      ['otherwise' ~ otherwise:statement]
    ;

for_every_body
    = [('@' name:basic_name)] item_name:[basic_name]
      'that' ~ iterable:expression 'has' 'do' do:statement;

accessor
    =
    | '.' ~ @:basic_name
    | enlarge_reduce
    ;

access
    =
    | accessing:(name | modify) accessors:{accessor}+
    | name
    ;
#access = accessing:name accessor:accessor;

access_list = ','.{access}+ ;


load_body
    =
    | to_load:'*' ~ 'from' ~ load_from:(>access_list) ['into' ~ into:access]
    | to_load:'!' ~ 'into' ~ into:(>access_list)
    | to_load:(','.{basic_name}+) 'from' ~ load_from:access ['into' ~ into:access]
    | load_from:(','.{basic_name}+) ['into' ~ into:access] to_load:`''`
    | to_load:(','.{basic_name}+)
    ;

modifier_args = '(' @:','.{ expression } [','] ')';

enlarge = size:[expression] '@' value:[expression];

enlarge_reduce
    =
    | '{' !'}' ~ @:(enlarge | expression | '*') '}'
    | '{' &'}' ~ @:`''` '}'
    ;

expression
    =
    | '()' ~ !()
    | use_if;

use_if
    =
    | 'use' ~ use:expression 'if' predicate:conditional 'otherwise' otherwise:expression
    | conditional
    ;

conditional
    =
    | 'not' ~ conditional
    | comparison
    ;

comparison
    =
    | left:comparison op:(>comp_op) ~ right:expression
    | math
    ;

math
    =
    | left:math op:('+'|'-') ~ right:math
    | left:roll_math op:('*'|'//'|'/' | '%') ~ right:roll_math
    | roll_math
    ;

# &: combine rolls
# ^: remove x number of values
roll_math
    =
    | left:roll_math op:('&' | '^') ~ right: expression
    | length
    ;

length
    =
    | '#' ~ length
    | modify
    ;

modify
    =
    | subject:modify  '->' ~ modifier:(basic_name|enlarge_reduce) [args:modifier_args]
    | access_expr
    ;

access_expr
    =
    | >access
    | dice
    ;

dice
    =
    | number_of_dice:[enlarge_reduce_expr] /d|D/ ~ sides:enlarge_reduce_expr
    | enlarge_reduce_expr
    ;

enlarge_reduce_expr
    =
    | &'{' ~ enlarge_reduce
    | factor
    ;

factor
    =
    | '(' !')' ~ @:expression ')'
    | atom
    ;

atom
    =
    | number
    | name
    ;

modifier_params = '(' @:','.{ name } [','] ')';

modifier_def_body =  parameters:[modifier_params] definition:statement ;

assign_op
    =
    | '='
    | '+='
    | '-='
    | '/='
    | '//='
    | '*='
    | '%='
    | '^='
    | '&='
    ;

modifier_def = target:access '<-' parameters:[modifier_params] definition:statement;

restart_body
    =
    | location_specifier:'before' ~ [target:name]
    | location_specifier:'at' ~ [target:name]
    | location_specifier:'after' ~ [target:name]
    ;

assignment = target:access op:(>assign_op) !'=' ~ value:expression;

basic_statement
    =
    | 'if' ~ @:if_body
    | 'load' ~ @:load_body
    | &(access '<-') ~ @:modifier_def
    | 'until' ~ @:until_do_body
    | 'for' 'every' ~ @:for_every_body
    | >assignment
    | 'restart' ~ restart_body
    | 'leave'
    | expression
    | '[' ~ @:{statement} ']'
    ;
