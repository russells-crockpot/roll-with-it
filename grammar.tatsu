@@grammar::RollIt
@@eol_comments:: /\/\/.*?$"/
@@keyword:: use roll if then when while for do until and or not in define
@@keyword:: int float number clear load as from
@@keyword:: otherwise skip unless

#start = expression $;

start = {statement} $;

statement::statement
    =
    | @:basic_statement
    | /[\n\r]+/
    | '|'
    ;

@name
NAME::IGNORE
    = /[a-zA-Z_][a-zA-Z_0-9]*/;

@name
KEBAB_NAME::IGNORE
    = /[a-zA-Z_]([\-a-zA-Z_0-9]*[\-a-zA-Z_0-9])?/ ;

FLOAT::pybuiltin_float
    = /-?\d*\.\d+/ ;

INT::pybuiltin_int
    = /-?\d+/ ;

NUMBER::IGNORE
    = FLOAT | INT;

return::Return
    = '@' @:expression;

predicate::Test
    = 'TODO';

if::If
    = 'if' predicate:predicate 'then' body:expression ['otherwise' expression];

use_if::UseWhen
    = 'use'  ~ if_true:expression 'if' predicate:predicate 'otherwise' if_false:expression;

# Loops
do_until::DoUntil
    = 'do' do:expression 'until' until:predicate ['otherwise' otherwise:expression];

until_do::UntilDo
    = 'until' until:predicate 'do' do:expression ['otherwise' otherwise:expression];

flow_control::FlowControl
    = 'skip' | 'continue';

dialects_list::IGNORE
    =
    | ','%{ @+:KEBAB_NAME }+
    | '(' ','%{ @+:KEBAB_NAME }+ ')'
    ;

loadables_list::IGNORE
    =
    | '*'
    | ','%{ @+:NAME }+
    | '(' ','%{ @+:NAME }+ ')'
    ;

load::Load
    = 'load' dialects:dialects_list;

load_from::LoadFrom
    = 'load' loadables:loadables_list 'from' dialect:KEBAB_NAME;

modifier_args::IGNORE
    = '(' ','%{ @+:expression } [','] ')';

modifier_call::ModifierCall
    = '->' ~ modifier:reference args:[modifier_args] ;

length::Length
    = '#' ~ @:access;

reference::Reference
    = NAME | '?';

fill::Fill
    = size:[expression] '@' value:[expression];

roll::Roll
    =
    | '[' !']' ~ value:(fill | expression | '*'| '-')']'
    | '[' &']' ~ value:`'-'` ']'
    ;

accessor::IGNORE
    =
    | '.' @:NAME
    | roll
    ;

expression::IGNORE
    = roll_math;

# &: combine rolls
# ^: remove x number of dice
roll_math::RollMath
    =
    | right:modify op:('&' | '^') left: expression
    | math
    ;

math::Math
    =
    | left:math op:('+'|'-') ~ right:math
    | left:access op:('*'|'//'|'/') ~ right:access
    | access
    ;

access::Access
    =
    | accessing:modify accessors:{accessor}+
    | unary_expr
    ;

unary_expr::IGNORE
    =
    | &'#' ~ length
    | modify
    ;

modify::Modify
    =
    | modifying:access  &'->' ~ modifiers:{modifier_call}+
    | dice
    ;

dice::Dice
    =
    | number_of_dice:[roll_expr] /d|D/ ~ sides:roll_expr
    | block
    ;

block::IGNORE
    =
    | '{' ~ @:{statement} '}'
    | roll_expr
    ;

roll_expr::IGNORE
    =
    | &'[' ~ roll
    | factor
    ;

factor::IGNORE
    =
    | '(' !')' ~ @:expression ')'
    | atom
    ;

atom::IGNORE
    =
    | NUMBER
    | reference
    ;

#TODO allow assignment to an access
assignment::Assignment
    = name:NAME '<-' ~ value:expression ;

basic_statement
    =
    | expression
    | assignment
    | load_from
    #| load
    ;

