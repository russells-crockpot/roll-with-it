grammar rollit
start   <- ( _ statement _ )* stmt_or_expr? _ws  %statements

comment         <- '//' [^\n\r\f]+      %ignore
_               <- [ \t]*               %ignore
eol             <- comment+
                 / [\n\r\f]+            %ignore
eos             <- eol
                 / '|'+                 %ignore
_ws             <- [\n\r\f \t]*         %ignore
line_joining    <- '%>' _ [\n\r\f]+     %ignore


float   <- '-'? [0-9]* '.' [0-9]+   %float_
int     <- '-'? [0-9]+              %int_
number  <- float / int

string_escape   <- "\\" [\\runftvb']
string          <- "'" (string_escape / [^'])* "'"      %string

basic_name  <- [a-zA-Z_] [a-zA-Z_0-9]*                  %text
name        <- '$'                                      %special_ref
             / '?'                                      %special_ref
             / '~'                                      %special_ref
             / '!'                                      %special_ref
             / basic_name


enlarge <- @'{' _ws expression? _ws '@' _ws expression? _ws @'}' _      %enlarge
reduce  <- @'{' _ws (expression / '*') _ws @'}' _                       %reduce

modifier_call   <- @'->' _ access _ modifier_args?                      %modifier_call
modifier_args   <- @'(' _ws (expression _ ',' _ws )*
                   expression ? _  @')' _                               %arg_list


accessor    <- _ws @'.' _ basic_name _ / @(_ws '.'/ _) reduce _
access      <- reduce_expr accessor+                                    %access
             / name

mult_op         <- '*'              %text
                 / '%/'             %text
                 / '/'              %text
                 / '%' !'>'         %text
add_op          <- '+'              %text
                 / '-'              %text
comp_op         <- '=='             %text
                 / '!='             %text
                 / '<='             %text
                 / '>='             %text
                 / '<'              %text
                 / '>'              %text
                 / 'has' !(_ 'do')  %text
                 / 'and'            %text
                 / 'or'             %text
roll_op         <- '&'              %text
                 / '^'              %text
assign_op       <- '+='             %text
                 / '-='             %text
                 / '*='             %text
                 / '/='             %text
                 / '%='             %text
                 / '%/='            %text
                 / '^='             %text
                 / '&='             %text
                 / '='              %text

expression <- use_if

use_if <- @'use' _ expression _ @'if' _ comparison _
          @'otherwise' _ expression                     %use_if
        / @'not' _ comparison                           %negate
        / comparison

comparison  <- roll_math _ comp_op _ comparison         %binary_op
             / roll_math

roll_math   <- add_math _ roll_op !'=' _ roll_math      %binary_op
             / add_math

add_math    <- mult_math _ add_op !'=' _ add_math       %binary_op
             / mult_math

mult_math <- modify _ mult_op !'=' _  mult_math         %binary_op
           / @'#' _ modify                              %length
           / modify

modify  <- dice _ modifier_call+                        %modify
         / dice

dice    <- !(name/string) reduce_expr _ @`d` _
           !(name/string) reduce_expr                   %dice
          / access
          / reduce_expr

reduce_expr <- enlarge
             / reduce
             / '(' _ws expression _ws ')'
             / atom

atom        <- number / name / string

modifier_params <- (basic_name _ @',' _ws )* basic_name?

if_then         <- @'if' _ expression _ @'then' _ws statement _ eos*        %predicated_statement
unless          <- @'unless' _ expression _ @'then' _ws statement _ eos*    %predicated_statement

otherwise       <- @'otherwise' _ws stmt_or_expr                            %otherwise

basic_load_list     <- (basic_name _ ',' _ws )* basic_name?
access_load_list    <- (access _ ',' _ws )* access?
load_into           <- @'into' _ access
load_from           <- @'from' _ basic_load_list
load                <- @'load' _ '*' _ load_from _ load_into?               %load_from_into
                     / @'load' _ @'!' _ @'into' _ access_load_list          %create_bag
                     / @'load' _ basic_load_list _ load_from _ load_into    %load_from_into
                     / @'load' _ basic_load_list _ load_from                %load_from
                     / @'load' _ basic_load_list _ load_into                %load_into
                     / @'load' _ basic_load_list                            %load



restart_pos     <- 'before' _ name?                     %restart
                 / 'at' _ name?                         %restart
                 / 'after' _ name?                      %restart

except_when     <- @'except' _ @'when' _ expression _
                   @'then' _ws stmt_or_expr             %predicated_statement

loop_name       <- @'@' _ basic_name                    %loop_name
loop_body       <- @'do' @_ws stmt_or_expr              %loop_body

stmt_or_expr    <- statement / expression
block_stmt      <- (statement _ !']')* _ (expression _ &']' / statement)

statement   <- eos
             / 'leave'                                                          %leave
             / @'restart' _  restart_pos
             / @'[' _ws block_stmt _ws @']' _                                   %block
             / @'[' _ws @']' _                                                  %empty_block
             / load
             / if_then (_ws unless)* (_ws otherwise)?                           %if_stmt
             / @'for' _ @'every' _ loop_name? _ basic_name _ @'that' _
               expression _ @'has' _ loop_body                                  %for_every
             / @'until' _ loop_name? _ expression _ loop_body _ws
               (except_when _ws)* otherwise?                                    %until_do
             / access _ assign_op _ws expression                                %assignment
             / access _ @'<-' _ modifier_params _ws
               @(':'/ ':'? &'[') _ stmt_or_expr                                 %modifier_def
             / expression _ eos
