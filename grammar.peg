grammar rollit
start           <- @shebang?  ( _ statement _ )* stmt_or_expr? _ws  %statements

shebang         <- '#!'  [^\n\r\f]*     %ignore

comment         <- '//' [^\n\r\f]*      %ignore
_               <- [ \t]*               %ignore
eol             <- comment+
                 / [\n\r\f]+            %ignore

keyword <- 'leave'
         / 'restart'

eos             <- eol
                 / '|'+                 %ignore
                 / _ &']'
                 / _ &':}'
                 / _ &'but'
_ws             <- [\n\r\f \t]*         %ignore
line_joining    <- '%>' _ [\n\r\f]+     %ignore


float   <- '-'? [0-9]* '.' [0-9]+   %float_
int     <- '-'? [0-9]+              %int_
number  <- float / int

string_escape   <- "\\" [\\runftvb']
string          <- "'" (string_escape / [^'])* "'"          %string

#TODO
basic_name  <- !(keyword (_/eos)) [a-zA-Z_] [a-zA-Z_0-9]*   %reference
name        <- '$'                                          %special_ref
             / '?'                                          %special_ref
             / '~'                                          %special_ref
             / '!'                                          %special_ref
             / '#'                                          %special_ref
             / basic_name

special_entry       <- '^'                                  %special_entry
                     / '.'                                  %special_entry
                     / '='                                  %special_entry
                     / 'clear'                              %special_entry
                     / ':'                                  %special_entry
                     / '!'                                  %special_entry

new_bag             <- @'{:' _ws (_ statement _ !':}')* _
                       statement _ws @':}' _                %new_bag
                     / @'{' _ @':' _ @'}' _                 %new_bag
                     / @'{:' _ws @':}' _                    %new_bag

enlarge     <- @'{' _ws !(':' / special_accessor)
               expression? _ws '@' _ws expression? _ws @'}' _               %enlarge
reduce      <- @'{' _ws !(':' / special_accessor)
               expression _ws @'}' _                                        %reduce

two_sided_op    <- '*'                  %two_sided_operator
                 / '%/'                 %two_sided_operator
                 / '/'                  %two_sided_operator
                 / '%'                  %two_sided_operator
                 / '+'                  %two_sided_operator
                 / '-' ![a-z_A-Z]       %two_sided_operator
                 / 'or'                 %two_sided_operator
                 / 'and'                %two_sided_operator
                 / 'isa'                %two_sided_operator
                 / '@'                  %two_sided_operator
                 / '=='                 %two_sided_operator
                 / '!='                 %two_sided_operator
                 / '<='                 %two_sided_operator
                 / '>='                 %two_sided_operator
                 / '<'                  %two_sided_operator
                 / '>'                  %two_sided_operator
                 / '&'                  %two_sided_operator
one_sided_op    <- 'has'                %one_sided_operator
                 / '#'                  %overload_only_operator
                 / '0'                  %overload_only_operator
                 / '{' _ '}'            %overload_only_operator
                 / 'for' _ 'every'      %overload_only_operator
                 / '?'                  %overload_only_operator

overload_op     <- @'<[' _ two_sided_op _ @']' _                            %left_op_overload
                 / @'[' _ two_sided_op _ @']>' _                            %right_op_overload
                 / @'[' _ one_sided_op _ @']' _                             %one_sided_op_overload

special_accessor    <- '#'                                                  %special_accessor
                     / '*'                                                  %special_accessor
                     / '+'                                                  %special_accessor
                     / '='                                                  %special_accessor
                     / '^'                                                  %special_accessor

accessor            <- basic_name  _
                     / @'{' _ special_accessor _ @'}' _
                     / @'<' !'[' _ special_entry _  @'>' _
                     / @'<' !'[' _ expression _  @'>' _                     %raw_accessor
                     / overload_op
                     / reduce _

accessing           <- reduce_expr
                     / @'<' !'[' _ special_entry _ @'>' _
                     / overload_op
                     / name
access              <- accessing (_ws @'.' accessor)+                       %access
                     / @'<' !'[' _ special_entry _ @'>' _
                     / name

mult_op         <- '*'                          %two_sided_operator
                 / '%/'                         %two_sided_operator
                 / '/'                          %two_sided_operator
                 / '%' !'>'                     %two_sided_operator
add_op          <- '+'                          %two_sided_operator
                 / '-'                          %two_sided_operator
anor_op         <- 'or'                         %two_sided_operator
                 / 'and' !(_ 'always')          %two_sided_operator
comp_op         <- '=='                         %two_sided_operator
                 / '!='                         %two_sided_operator
                 / '<='                         %two_sided_operator
                 / '>='                         %two_sided_operator
                 / '<'                          %two_sided_operator
                 / '>'                          %two_sided_operator
                 / 'has' !(_ 'do')              %one_sided_operator
                 / 'isa'                        %two_sided_operator
assign_op       <- '+='                         %text
                 / '-='                         %text
                 / '*='                         %text
                 / '/='                         %text
                 / '%='                         %text
                 / '%/='                        %text
                 / '&='                         %text
                 / '=' !'>'                     %text


expression <- use_if

use_if <- @'use' _ expression _ @'if' _ anor _
          @'otherwise' _ expression                     %use_if
        / @'not' _ anor                           %negate
        / anor

anor        <- comparison _ anor_op _ anor              %binary_op
             / comparison


comparison  <- roll_math _ comp_op _ comparison         %binary_op
             / roll_math

roll_math   <- add_math _ '&' !'=' _ roll_math          %binary_op
             / add_math

add_math    <- mult_math _ add_op !'=' _ add_math       %binary_op
             / mult_math

mult_math <- modify _ mult_op !'=' _  mult_math         %binary_op
           / modify

modify  <- first_modifier_call modifier_call*           %modify
         / dice

dice    <- !(name/string) reduce_expr _ @`d` _
           !(name/string) reduce_expr                   %dice
          / access
          / reduce_expr

reduce_expr <- enlarge
             / new_bag
             / reduce
             / @'(' _ws expression _ws @')' _
             / atom

atom        <- number / name / string



modifier_tail           <- access _ modifier_args?                          %modifier_call
first_modifier_call     <- dice _ ('-'/':') @'>' _ modifier_tail            %first_modifier_call
modifier_call           <- _ws @'->' _ modifier_tail
modifier_args           <- @'(' _ws (expression _ @',' _ws )*
                            expression ? _  @')' _                          %arg_list

modifier_params         <- (basic_name _ @',' _ws )* basic_name?            %param_list
small_modifier_body     <- modifier_params _ @':' _ !'['
                           _ expression                                     %small_modifier_body
normal_modifier_body    <- modifier_params _ @(':'?) _ws
                           @'[' _ block_body? _ @']' _                      %normal_modifier_body
modifier_def_target     <- access
                         / @'<' _ special_entry _ @'>' _
                         / '!'                                              %special_ref
                         / '?'                                              %special_ref
modifier_def    <- modifier_def_target _ @'<-' _ws
                   ( small_modifier_body / normal_modifier_body)            %modifier_def

then            <- @'then' _ws stmt_or_expr
if_then         <- @'if' _ expression _ then                                %if_
unless          <- @'unless' _ expression _ then                            %unless
otherwise       <- @'otherwise' _ws stmt_or_expr                            %otherwise

basic_load_list     <- (basic_name _ @',' _ws )* basic_name?
access_load_list    <- (access _ @',' _ws )* access?
load_into           <- @'into' _ access
load_from           <- @'from' _ access_load_list
load                <- @'load' _ '*' _ load_from _ load_into?               %load_from_into
                     / @'load' _ access_load_list _ load_from _ load_into   %load_from_into
                     / @'load' _ access_load_list _ load_from               %load_from
                     / @'load' _ access_load_list _ load_into               %load_into
                     / @'load' _ access_load_list                           %load


except_when     <- @'except' _ @'when' _ expression _ then                  %predicated_statement
restart_pos     <- 'before' _ name?                                         %restart
                 / 'at' _ name?                                             %restart
                 / 'after' _ name?                                          %restart
stmt_or_expr    <- statement / expression
block_body      <- (statement _ !']')* _ statement

loop_name   <- @'@' _ basic_name                    %loop_name
loop_body   <- @'do' @_ws stmt_or_expr              %loop_body

but_if_stmt <- expression _ &'but' / stmt_or_expr
but_if      <- @'but' !'always' _ @'if' _ (expression / '*' ) _
               @'occurs' _ then                                         %but_if
always      <- @'but' _ @'always' _ws stmt_or_expr                      %always
attempt     <- @'attempt' _ws but_if_stmt _ws always                    %attempt
             / @'attempt' _ws but_if_stmt _ws but_if+ (_ws always)?     %attempt
             / @'attempt' _ws but_if_stmt                               %attempt

statement   <- eos
             / 'leave'                                                          %leave
             / attempt
             / @'oops' _ expression                                             %oops
             / @'clear' _ access                                                %clear
             / @'restart' _  restart_pos
             / @'[' _ws block_body _ws @']' _                                   %block
             / @'[' _ws @']' _                                                  %empty_block
             / @'={' !':' _ access _ @'}' _                                     %reduce_and_assign
             / load
             / modifier_def
             / if_then (_ws unless)* (_ws otherwise)?                           %if_stmt
             / @'for' _ @'every' _ loop_name? _ basic_name _ @'that' _
               expression _ @'has' _ loop_body                                  %for_every
             / @'until' _ loop_name? _ expression _ loop_body _ws
               (except_when _ws)* otherwise?                                    %until_do
             / access _ @'=>' _ modifier_tail modifier_call*                    %modify_and_assign
             / access _ assign_op _ws expression                                %assignment
             / expression _ eos
