""" The parser file, Automatically generated by TatSu (with some small modifications).
"""
# pylint: skip-file
#
####################################################################################################
#
# CAVEAT UTILITOR
#
# This file was automatically generated by TatSu.
#
#    https://pypi.python.org/pypi/tatsu/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.

from __future__ import generator_stop

from tatsu.buffering import Buffer
from tatsu.parsing import Parser as _Parser
from tatsu.parsing import tatsumasu, leftrec, nomemo

KEYWORDS = {}  # type: ignore


class _Tokenizer(Buffer):

    def __init__(self,
                 text,
                 whitespace=None,
                 nameguard=None,
                 comments_re=None,
                 eol_comments_re=None,
                 ignorecase=None,
                 namechars='',
                 **kwargs):
        super().__init__(text,
                         whitespace=whitespace,
                         nameguard=nameguard,
                         comments_re=comments_re,
                         eol_comments_re=eol_comments_re,
                         ignorecase=ignorecase,
                         namechars=namechars,
                         **kwargs)


class Parser(_Parser):

    def __init__(self,
                 whitespace=None,
                 nameguard=None,
                 comments_re=None,
                 eol_comments_re=None,
                 ignorecase=None,
                 left_recursion=True,
                 parseinfo=True,
                 keywords=None,
                 namechars='',
                 tokenizercls=_Tokenizer,
                 **kwargs):
        if keywords is None:
            keywords = KEYWORDS
        super().__init__(whitespace=whitespace,
                         nameguard=nameguard,
                         comments_re=comments_re,
                         eol_comments_re=eol_comments_re,
                         ignorecase=ignorecase,
                         left_recursion=left_recursion,
                         parseinfo=parseinfo,
                         keywords=keywords,
                         namechars=namechars,
                         tokenizercls=tokenizercls,
                         **kwargs)

    @tatsumasu()
    @nomemo
    def _start_(self):  # noqa
        self._expression_()
        self._check_eof()

    @tatsumasu()
    def _int_(self):  # noqa
        self._pattern('-?\\d+')

    @tatsumasu()
    def _dice_(self):  # noqa
        self._factor_()
        self.name_last_node('number_of_dice')
        self._pattern('d|D')
        self._factor_()
        self.name_last_node('sides')
        self.ast._define(['number_of_dice', 'sides'], [])

    @tatsumasu()
    @leftrec
    def _expression_(self):  # noqa
        with self._choice():
            with self._option():
                self._expression_()
                self.name_last_node('left')
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('+')
                        with self._option():
                            self._token('-')
                        self._error('expecting one of: + -')
                self.name_last_node('op')
                self._cut()
                self._expression_()
                self.name_last_node('right')
            with self._option():
                self._dice_expr_()
            self._error('expecting one of: dice dice_expr expression factor')
        self.ast._define(['left', 'op', 'right'], [])

    @tatsumasu()
    def _dice_expr_(self):  # noqa
        with self._choice():
            with self._option():
                self._dice_()
            with self._option():
                self._factor_()
            self._error('expecting one of: ( /-?\\d+/ dice factor int')

    @tatsumasu()
    def _factor_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('(')
                self._expression_()
                self.name_last_node('@')
                self._token(')')
            with self._option():
                self._int_()
            self._error('expecting one of: ( /-?\\d+/ int')
