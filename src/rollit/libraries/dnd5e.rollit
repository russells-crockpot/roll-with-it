locals = {:}

locals.__VantageBase = {:
    create <- mod: {:
        _mod = mod
        <^> = ?
    :}
    <.> <- k[
        if k == ! then k = 0
        if k isa 'number' then [
            ? = 2d20 -> ?._mod + k
        ]
        otherwise ? = ?.<k>
    ]
:}

advantage = locals.__VantageBase:>create(top)
advantage.{'`doc`'} = 'Accessing an entry in this bag using a number will perform a roll at
advantage; then the number used in accessing will be added to the roll and the result will be
returned.'
disadvantage = locals.__VantageBase:>create(bottom)
disadvantage.{'`doc`'} = 'Accessing an entry in this bag using a number will perform a roll at
disadvantage; then the number used in accessing will be added to the roll and the result will be
returned.'

locals.straight_roll = locals.__VantageBase:>create(! <-: {1d20})

PROFICIENCY = {:
    no = 0
    yes = 1
    expert = 2
:}

BaseScore = {:
    create <- base: [
        if not base then base = {:}
        base.<^> = ?
        ? = base
    ]
    proficiency = PROFICIENCY.no
    _proficiency_bonus_getter = !
    _proficiency_bonus = !
    roll <- with [
        if with == ! then with = locals.straight_roll
        ? = with.{?.proficiency_bonus}
    ]
    <=> = {:
        proficiency_bonus <- v [
            if v isa 'modifier' then [
                ?._proficiency_bonus_getter = v
                ?._proficiency_bonus = !
            ] otherwise [
                ?._proficiency_bonus_getter = !
                ?._proficiency_bonus = v
            ]
        ]
    :}

    <.> = {:
        proficiency_bonus <- [
            if ?._proficiency_bonus_getter then ?.proficiency -> ?._proficiency_bonus_getter
            otherwise ? = ?._proficiency_bonus
        ]
    :}
:}

BaseScoreBlock = {:
    create <- base: [
        if not base then base = {:}
        base.<^> = ?
        ? = base
    ]
    proficiency_bonus = !
    _scores = [:]
    <=> <- k, v [
        ?.<k> = v
        if k == 'proficiency_bonus' then [
            for every score that ?.<'_scores'> has do score.proficiency_bonus = v
        ] otherwise if v->parents has BaseScore then [
            _scores &= v
            if not v.proficiency_bonus then v.proficiency_bonus = ?.proficiency_bonus
        ]
    ]
:}

AbilityScore = BaseScore:>create({:
    create <- name, full_name: {:
        <^> = ?
        name = name
        full_name = full_name
        create <- score, proficiency: {:
            <^> = ?
            score = score
            proficiency = proficiency
        :}
    :}
    <.> = {:
        modifier <-: (?.score - 10) / 2
    :}
:})

ability_scores = {:
    str = AbilityScore:>create('str','Strength')
    dex = AbilityScore:>create('dex','Dexterity')
    con = AbilityScore:>create('con','Constitution')
    int = AbilityScore:>create('int','Intelligence')
    wis = AbilityScore:>create('wis','Wisdom')
    cha = AbilityScore:>create('cha','Charisma')
:}


AbilityBlock = BaseScoreBlock:>create({:
    create <- str, dex, con, int, wis, cha, saves: {:
        <^> = ?
        ! -> runtime.names_in_scope -> print
        str = ability_scores.str:>create(str, saves has ability_scores.str.name)
        dex = ability_scores.dex:>create(dex, saves has ability_scores.dex.name)
        con = ability_scores.con:>create(con, saves has ability_scores.con.name)
        int = ability_scores.int:>create(int, saves has ability_scores.int.name)
        wis = ability_scores.wis:>create(wis, saves has ability_scores.wis.name)
        cha = ability_scores.cha:>create(cha, saves has ability_scores.cha.name)
    :}
:})


Skill = BaseScore:>create({:
    create <- name, default_ability: {:
        <^> = ?
        name = name
        default_ability = default_ability
        prof_bonus = !
        create <- proficiency: {:
            <^> = ?
            proficiency = proficiency
        :}
    :}
:})

skills = {:
    acrobatics = Skill:>create('Acrobatics', ability_scores.dex.name)
    animal_handling = Skill:>create('Animal Handling', ability_scores.wis.name)
    arcana = Skill:>create('Arcana', ability_scores.int.name)
    athletics = Skill:>create('Athletics', ability_scores.str.name)
    deception = Skill:>create('Deception', ability_scores.cha.name)
    history = Skill:>create('History', ability_scores.int.name)
    insight = Skill:>create('Insight', ability_scores.wis.name)
    intimidation = Skill:>create('Intimidation', ability_scores.cha.name)
    investigation = Skill:>create('Investigation', ability_scores.int.name)
    medicine = Skill:>create('Medicine', ability_scores.wis.name)
    nature = Skill:>create('Nature', ability_scores.int.name)
    perception = Skill:>create('Perception', ability_scores.wis.name)
    performance = Skill:>create('Performance', ability_scores.cha.name)
    persuasion = Skill:>create('Persuasion', ability_scores.cha.name)
    religion = Skill:>create('Religion', ability_scores.int.name)
    sleight_of_hand = Skill:>create('Sleight of Hand', ability_scores.dex.name)
    stealth = Skill:>create('Stealth', ability_scores.dex.name)
    survival = Skill:>create('Survival', ability_scores.wis.name)
:}

SkillBlock = BaseScoreBlock:>create({:
    create <- profiencies [
        ? = {: <^> = ? :}
        for every entry that skills has do [
            name = entry.{0}
            skill = entry.{1}
            proficiency = PROFICIENCY.no
            if profiencies has name then proficiency = profiencies.{name}
            otherwise if profiencies has skill.name then proficiency = profiencies.{skill.name}
            otherwise if profiencies has skill then proficiency = profiencies.{skill}
            ?.{name} = skill:>create(proficiency)
        ]
    ]
:})


StatBlock = {:
    create <- abilities, skills, proficiency_bonus[

        ? = {:
            <^> = ?
            abilities = abilities
            skills = skills
            <=> = {:
                proficiency_bonus <- v [
                    ?.skills.proficiency_bonus = proficiency_bonus
                    ?.abilities.proficiency_bonus = proficiency_bonus
                ]
                skills <- v [
                    'called' -> print
                    if v isa 'roll' then v = SkillBlock:>create(v)
                    ?.<'skills'> = v
                ]
            :}
        :}
        //?.skills = skills
        ?.proficiency_bonus = proficiency_bonus
    ]
:}

clear locals
