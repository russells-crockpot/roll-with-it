UNARY_OPS: "+" | "-"
ALIAS_DEF_START: "<" "a" "lias"?
SUBSTITUTION_DEF_START: "<" "s" ( "ub" "stitution"?)?
MODIFIER_DEF_START: "<" "m" ( "od"  "ifier"?)?
_DIALECT_KEYWORD: "<dialect"
KEBAB_NAME: LETTER (LETTER | NUMBER | "_" | "-" )*
DIALECT_REF: KEBAB_NAME | "~" | "^"
COMMENT: /#[^\n]*/
_NEWLINE: ( /\r?\n[\t ]*/ | COMMENT )+

start: _NEWLINE? (statement _NEWLINE)* statement _NEWLINE?

substitution: "{" KEBAB_NAME "}"
reference: "$" KEBAB_NAME
modifier_args: "(" [expression ("," expression)*] ")" -> args
modifier_call: ":" NAME [modifier_args]

definition: _alias_definition
          //| _modifier_definition
          | _substitution_definition

_alias_definition: ALIAS_DEF_START KEBAB_NAME KEBAB_NAME">"
_substitution_definition: SUBSTITUTION_DEF_START KEBAB_NAME (expression | modifier_call) ">"
dialect_parent: "(" DIALECT_REF ")"
dialect_name: KEBAB_NAME | DIALECT_REF
_dialect_def: dialect_name
            | dialect_parent
            | dialect_name dialect_parent
switch_dialect: _DIALECT_KEYWORD _dialect_def ">"

roll_ref: "rolls" "[" (roll_ref_expression | "*" | "#" ) "]"
roll_results_ref: "?" ("." ("total" | "sides" | roll_ref))? -> roll_results
?roll_ref_expression: expression | roll_results_ref
//modifier_param: "(" [NAME ("," NAME)*] ")" -> params
//_modifier_definition: MODIFIER_DEF_START NAME modifier_param? ":" roll_ref_expression ">"

_macro_arg: /[^,\n]+/
macro_args: _macro_arg ("," _macro_arg)* -> args
macro: "!" KEBAB_NAME macro_args?

?atom: NUMBER
     | reference
     | substitution

!_mult_op: "*" | "/"
!_add_op: "+" | "-"

?expression: expression _add_op mult_expr -> math
           | mult_expr
?mult_expr: mult_expr _mult_op unary_expr -> math
          | unary_expr
?unary_expr: _add_op run_expr -> unary
           | run_expr
?run_expr: roll_expr? "@" roll_expr -> run
         | roll_expr
?roll_expr: _paren_expr? ("d" | "D" ) _paren_expr modifier_call* -> roll
          | _paren_expr
_paren_expr: "(" expression ")" | atom
//expression: atom | add_expr

//?arith_expr: atom (_add_op expression)* -> math
//?mult_expr: arith_expr (_mult_op expression)* -> math
//?paren_expr: mult_expr | "(" expression ")"
////?expression: atom
//?expression: paren_expr

?statement: expression
          | definition
          | switch_dialect
          | KEBAB_NAME "=" expression -> assignment
          | macro

%import common.INT -> NUMBER
//%import common.SIGNED_INT -> SIGNED_NUMBER
%import common.LETTER
%import common.CNAME -> NAME
%import common.WS


%ignore COMMENT
%ignore WS
